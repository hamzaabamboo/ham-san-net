/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/attachments.create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create an attachment
     * @description Creating an attachment object creates a database record and returns the inputs needed to generate a signed url and upload the file from the client to cloud storage.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @example image.png */
            name: string;
            /**
             * Format: uuid
             * @description Identifier for the associated document, if any.
             */
            documentId?: string;
            /** @example image/png */
            contentType: string;
            /** @description Size of the file attachment in bytes. */
            size: number;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                maxUploadSize?: number;
                /** Format: uri */
                uploadUrl?: string;
                form?: Record<string, never>;
                attachment?: components['schemas']['Attachment'];
              };
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/attachments.redirect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Retrieve an attachment
     * @description Load an attachment from where it is stored based on the id. If the attachment is private then a temporary, signed url with embedded credentials is generated on demand.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the attachment.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description The url for the attachment */
        302: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/attachments.delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete an attachment
     * @description Deleting an attachment is permanant. It will not delete references or links to the attachment that may exist in your documents.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the attachment.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Retrieve auth
     * @description Retrieve authentication details for the current API key
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Auth'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth.config': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Retrieve auth config
     * @description Retrieve authentication options
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                /** @example Acme Inc */
                name?: string;
                /** @example acme-inc.getoutline.com */
                hostname?: string;
                services?: {
                  /** @example slack */
                  id?: string;
                  /** @example Slack */
                  name?: string;
                  /** @example https://acme-inc.getoutline.com/auth/slack */
                  authUrl?: string;
                }[];
              };
            };
          };
        };
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retrieve a collection */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the collection.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Collection'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.documents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retrieve a collections document structure */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the collection.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example [] */
              data?: components['schemas']['NavigationNode'][];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** List all collections */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Collection'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a collection */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @example Human Resources */
            name: string;
            /** @example  */
            description?: string;
            permission?: components['schemas']['Permission'];
            /** @example #123123 */
            color?: string;
            /** @example false */
            private?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Collection'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update a collection */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            /** @example Human Resources */
            name?: string;
            permission?: components['schemas']['Permission'];
            /** @example  */
            description?: string;
            /** @example #123123 */
            color?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Collection'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.add_user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add a collection user
     * @description This method allows you to add a user membership to the specified collection.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            permission?: components['schemas']['Permission'];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                users?: components['schemas']['User'][];
                memberships?: components['schemas']['Membership'][];
              };
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.remove_user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Remove a collection user
     * @description This method allows you to remove a user from the specified collection.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Identifier for the collection
             */
            id: string;
            /** Format: uuid */
            userId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.memberships': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all collection memberships
     * @description This method allows you to list a collections individual memberships. It's important to note that memberships returned from this endpoint do not include group memberships.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] & {
            /**
             * Format: uuid
             * @description Identifier for the collection
             */
            id: string;
            /**
             * @description Filter memberships by user names
             * @example jenny
             */
            query?: string;
            permission?: components['schemas']['Permission'];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                users?: components['schemas']['User'][];
                memberships?: components['schemas']['Membership'][];
              };
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.add_group': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add a group to a collection
     * @description This method allows you to give all members in a group access to a collection.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            groupId: string;
            permission?: components['schemas']['Permission'];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                collectionGroupMemberships?: components['schemas']['CollectionGroupMembership'][];
              };
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.remove_group': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Remove a collection group
     * @description This method allows you to revoke all members in a group access to a collection. Note that members of the group may still retain access through other groups or individual memberships.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Identifier for the collection
             */
            id: string;
            /** Format: uuid */
            groupId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.group_memberships': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all collection group members
     * @description This method allows you to list a collections group memberships. This is the list of groups that have been given access to the collection.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] & {
            /**
             * Format: uuid
             * @description Identifier for the collection
             */
            id: string;
            /**
             * @description Filter memberships by group names
             * @example developers
             */
            query?: string;
            permission?: components['schemas']['Permission'];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                groups?: components['schemas']['Group'][];
                collectionGroupMemberships?: components['schemas']['CollectionGroupMembership'][];
              };
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete a collection
     * @description Delete a collection and all of its documents. This action can’t be undone so please be careful.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Export a collection
     * @description Triggers a bulk export of the collection in markdown format and their attachments. If documents are nested then they will be nested in folders inside the zip file. The endpoint returns a `FileOperation` that can be queried to track the progress of the export and get the url for the final file.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            format?: 'outline-markdown' | 'json' | 'html';
            /** Format: uuid */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                fileOperation?: components['schemas']['FileOperation'];
              };
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collections.export_all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Export all collections
     * @description Triggers a bulk export of all documents in and their attachments. The endpoint returns a `FileOperation` that can be queried through the fileOperations endpoint to track the progress of the export and get the url for the final file.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            format?: 'outline-markdown' | 'json' | 'html';
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                fileOperation?: components['schemas']['FileOperation'];
              };
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comments.create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a comment
     * @description Create a comment
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            documentId: string;
            /** Format: uuid */
            parentCommentId?: string;
            data: Record<string, never>;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Comment'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comments.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Retrieve a comment
     * @description Retrieve a comment
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            /** @description Include the document text that the comment is anchored to, if any */
            includeAnchorText?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Comment'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comments.update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update a comment
     * @description Update a comment
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            data: Record<string, never>;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Comment'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comments.delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete a comment
     * @description Delete a comment
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comments.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all comments
     * @description This method will list all comments matching the given properties.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'] & {
              /**
               * Format: uuid
               * @description Filter to a specific document
               */
              documentId?: string;
              /**
               * Format: uuid
               * @description Filter to a specific collection
               */
              collectionId?: string;
              /** @description Include the document text that the comment is anchored to, if any */
              includeAnchorText?: boolean;
            };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Comment'][];
              policies?: components['schemas']['Policy'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retrieve a document */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @description Unique identifier for the document. Either the UUID or the urlId is acceptable. */
            id?: string;
            /**
             * Format: uuid
             * @description Unique identifier for a document share, a shareId may be used in place of a document UUID
             */
            shareId?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.import': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Import a file as a document
     * @description This method allows you to create a new document by importing an existing file. By default a document is set to the collection root. If you want to create a nested/child document, you should pass parentDocumentId to set the parent document.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'multipart/form-data': {
            /** @description Only plain text, markdown, docx, and html format are supported. */
            file?: Record<string, never>;
            /** Format: uuid */
            collectionId?: string;
            /** Format: uuid */
            parentDocumentId?: string;
            template?: boolean;
            publish?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Export a document as markdown */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @description Unique identifier for the document. Either the UUID or the urlId is acceptable. */
            id?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @description The document content in Markdown formatting */
              data?: string;
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all documents
     * @description This method will list all published documents and draft documents belonging to the current user.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'] & {
              /**
               * Format: uuid
               * @description Optionally filter to a specific collection
               */
              collectionId?: string;
              /** Format: uuid */
              userId?: string;
              /** Format: uuid */
              backlinkDocumentId?: string;
              /** Format: uuid */
              parentDocumentId?: string;
              /** @description Optionally filter to only templates */
              template?: boolean;
            };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'][];
              policies?: components['schemas']['Policy'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.drafts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all draft documents
     * @description This method will list all draft documents belonging to the current user.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'] & {
              /**
               * Format: uuid
               * @description A collection to search within
               */
              collectionId?: string;
              /**
               * @description Any documents that have not been updated within the specified period will be filtered out
               * @example month
               * @enum {string}
               */
              dateFilter?: 'day' | 'week' | 'month' | 'year';
            };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'][];
              policies?: components['schemas']['Policy'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.viewed': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all recently viewed documents
     * @description This method will list all documents recently viewed by the current user.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'][];
              policies?: components['schemas']['Policy'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.answerQuestion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Query documents with natural language
     * @description This method allows asking direct questions of your documents – where possible an answer will be provided. Search results will be restricted to those accessible by the current access token. Note that "AI answers" must be enabled for the workspace.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @example What is our holiday policy? */
            query?: string;
            /**
             * Format: uuid
             * @description Any documents that have not been edited by the user identifier will be filtered out
             */
            userId?: string;
            /**
             * Format: uuid
             * @description A collection to search within
             */
            collectionId?: string;
            /**
             * Format: uuid
             * @description A document to search within
             */
            documentId?: string;
            /**
             * @description Any documents that are not in the specified status will be filtered out
             * @enum {string}
             */
            statusFilter?: 'draft' | 'archived' | 'published';
            /**
             * @description Any documents that have not been updated within the specified period will be filtered out
             * @enum {string}
             */
            dateFilter?: 'day' | 'week' | 'month' | 'year';
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              documents?: components['schemas']['Document'][];
              policies?: components['schemas']['Policy'][];
              search?: components['schemas']['SearchResult'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Search all documents
     * @description This methods allows you to search your teams documents with keywords. Note that search results will be restricted to those accessible by the current access token.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] & {
            /** @example hiring */
            query?: string;
            /**
             * Format: uuid
             * @description Any documents that have not been edited by the user identifier will be filtered out
             */
            userId?: string;
            /**
             * Format: uuid
             * @description A collection to search within
             */
            collectionId?: string;
            /**
             * Format: uuid
             * @description A document to search within
             */
            documentId?: string;
            /**
             * @description Any documents that are not in the specified status will be filtered out
             * @example published
             * @enum {string}
             */
            statusFilter?: 'draft' | 'archived' | 'published';
            /**
             * @description Any documents that have not been updated within the specified period will be filtered out
             * @example month
             * @enum {string}
             */
            dateFilter?: 'day' | 'week' | 'month' | 'year';
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                /**
                 * @description A short snippet of context from the document that includes the search query.
                 * @example At Acme Inc our hiring practices are inclusive
                 */
                context?: string;
                /**
                 * Format: float
                 * @description The ranking used to order search results based on relevance.
                 * @example 1.1844109
                 */
                ranking?: number;
                document?: components['schemas']['Document'];
              }[];
              policies?: components['schemas']['Policy'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a document
     * @description This method allows you to create or publish a new document. By default a document is set to the collection root. If you want to create a nested/child document, you should pass parentDocumentId to set the parent document.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @example Welcome to Acme Inc */
            title: string;
            /**
             * @description The body of the document, may contain markdown formatting.
             * @example …
             */
            text?: string;
            /** Format: uuid */
            collectionId: string;
            /** Format: uuid */
            parentDocumentId?: string;
            /** Format: uuid */
            templateId?: string;
            /** @description Whether this document should be considered to be a template. */
            template?: boolean;
            /** @description Whether this document should be immediately published and made visible to other team members. */
            publish?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update a document
     * @description This method allows you to modify an already created document
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
            /** @description The title of the document. */
            title?: string;
            /**
             * @description The body of the document, may contain markdown formatting.
             * @example …
             */
            text?: string;
            /** @description If true the text field will be appended to the end of the existing document, rather than the default behavior of replacing it. This is potentially useful for things like logging into a document. */
            append?: boolean;
            /** @description Whether this document should be published and made visible to other team members, if a draft */
            publish?: boolean;
            /** @description Whether the editing session has finished, this will trigger any notifications. This property will soon be deprecated. */
            done?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.templatize': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a template from a document
     * @description This method allows you to createa new template using an existing document as the basis
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.star': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Star a document
     * @description Starring a document gives it extra priority in the UI and makes it easier to find important information later.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.unstar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Unstar a document
     * @description Starring a document gives it extra priority in the UI and makes it easier to find important information later.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.unpublish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Unpublish a document
     * @description Unpublishing a document moves it back to a draft status and out of the collection.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.move': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Move a document
     * @description Move a document to a new location or collection. If no parent document is provided, the document will be moved to the collection root.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
            /** Format: uuid */
            collectionId?: string;
            /** Format: uuid */
            parentDocumentId?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                documents?: components['schemas']['Document'][];
                collections?: components['schemas']['Collection'][];
              };
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.archive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Archive a document
     * @description Archiving a document allows outdated information to be moved out of sight whilst retaining the ability to optionally search and restore it later.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.restore': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Restore a document
     * @description If a document has been archived or deleted, it can be restored. Optionally a revision can be passed to restore the document to a previous point in time.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
            /**
             * Format: uuid
             * @description Identifier for the revision to restore to.
             */
            revisionId?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Document'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete a document
     * @description Deleting a document moves it to the trash. If not restored within 30 days it is permenantly deleted.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
            /**
             * @description If set to true the document will be destroyed with no way to recover rather than moved to the trash.
             * @example false
             */
            permanent?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List document users
     * @description All users with access to a document. To list only users with direct membership to the document use `documents.memberships`
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
            /** @description If set, will filter the results by user name. */
            query?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['User'][];
              pagination?: components['schemas']['Pagination'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.memberships': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List document memberships
     * @description Users with direct membership to a document. To list all users with access to a document use `documents.users`.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description Unique identifier for the document. Either the UUID or the urlId is acceptable.
             * @example hDYep1TPAM
             */
            id: string;
            /** @description If set, will filter the results by user name */
            query?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                users?: components['schemas']['User'][];
                memberships?: components['schemas']['Membership'][];
              };
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.add_user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add a document user
     * @description This method allows you to add a user membership to the specified document.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @description Unique identifier for the document. Either the UUID or the urlId is acceptable. */
            id: string;
            /** Format: uuid */
            userId: string;
            permission?: components['schemas']['Permission'];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                users?: components['schemas']['User'][];
                memberships?: components['schemas']['Membership'][];
              };
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents.remove_user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Remove a document user
     * @description This method allows you to remove a user membership from the specified document.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @description Unique identifier for the document. Either the UUID or the urlId is acceptable. */
            id: string;
            /** Format: uuid */
            userId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/events.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all events
     * @description Events are an audit trail of important events that happen in the knowledge base.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'] & {
              /** @description Filter to a specific event, e.g. "collections.create". Event names are in the format "objects.verb" */
              name?: string;
              /**
               * Format: uuid
               * @description Filter to events performed by the selected user
               */
              actorId?: string;
              /**
               * Format: uuid
               * @description Filter to events performed in the selected document
               */
              documentId?: string;
              /**
               * Format: uuid
               * @description Filter to events performed in the selected collection
               */
              collectionId?: string;
              /** @description Whether to return detailed events suitable for an audit log. Without this flag less detailed event types will be returned. */
              auditLog?: boolean;
            };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Event'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/fileOperations.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retrieve a file operation */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the file operation.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['FileOperation'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/fileOperations.delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Delete a file operation */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the file operation.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/fileOperations.redirect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Retrieve the file
     * @description Load the resulting file from where it is stored based on the id. A temporary, signed url with embedded credentials is generated on demand.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the file operation.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': string;
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/fileOperations.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** List all file operations */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'] & {
              /**
               * @description The type of fileOperation
               * @example export
               * @enum {string}
               */
              type: 'export' | 'import';
            };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['FileOperation'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retrieve a group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the group.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Group'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** List all groups */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                groups?: components['schemas']['Group'][];
                /** @description A preview of memberships in the group, note that this is not all memberships which can be queried from `groups.memberships`. */
                groupMemberships?: components['schemas']['GroupMembership'][];
              };
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups.create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @example Designers */
            name: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Group'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups.update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update a group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            /** @example Designers */
            name: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Group'];
              policies?: components['schemas']['Policy'][];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups.delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete a group
     * @description Deleting a group will cause all of its members to lose access to any collections the group has previously been added to. This action can’t be undone so please be careful.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups.memberships': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all group members
     * @description List and filter all the members in a group.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] & {
            /**
             * @description Group id
             * @example a32c2ee6-fbde-4654-841b-0eabdc71b812
             */
            id: string;
            /**
             * @description Filter memberships by user names
             * @example jenny
             */
            query?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                users?: components['schemas']['User'][];
                groupMemberships?: components['schemas']['GroupMembership'][];
              };
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups.add_user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add a group member
     * @description This method allows you to add a user to the specified group.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                users?: components['schemas']['User'][];
                groups?: components['schemas']['Group'][];
                groupMemberships?: components['schemas']['Membership'][];
              };
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/groups.remove_user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Remove a group member
     * @description This method allows you to remove a user from the group.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Identifier for the collection
             */
            id: string;
            /** Format: uuid */
            userId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                groups?: components['schemas']['Group'][];
              };
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/revisions.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retrieve a revision */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the revision.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Revision'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/revisions.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** List all revisions */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Revision'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/shares.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retrieve a share object */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the share.
             */
            id?: string;
            /**
             * Format: uuid
             * @description Unique identifier for a document. One of id or documentId must be provided.
             */
            documentId?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Share'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/shares.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** List all shares */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Share'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/shares.create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a share
     * @description Creates a new share link that can be used by to access a document. If you request multiple shares for the same document with the same API key, the same share object will be returned. By default all shares are unpublished.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            documentId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Share'];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/shares.update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update a share
     * @description Allows changing an existing shares published status, which removes authentication and makes it available to anyone with the link.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
            published: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['Share'];
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/shares.revoke': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Revoke a share
     * @description Makes the share link inactive so that it can no longer be used to access the document.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        400: components['responses']['Validation'];
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users.invite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Invite users */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            invites: components['schemas']['Invite'][];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: {
                sent?: components['schemas']['Invite'][];
                users?: components['schemas']['User'][];
              };
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users.info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retrieve a user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the user.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['User'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all users
     * @description List and filter all the users in the team
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pagination'] &
            components['schemas']['Sorting'] & {
              /** @example jane */
              query?: string;
              emails?: string[];
              /**
               * @description The status to filter by
               * @enum {string}
               */
              filter?: 'all' | 'invited' | 'active' | 'suspended';
              role?: components['schemas']['UserRole'];
            };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['User'][];
              pagination?: components['schemas']['Pagination'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users.update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update a user
     * @description Update a users name or avatar. If no `id` is passed then the user associated with the authentication will be updated by default.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            name?: string;
            /** Format: BCP47 */
            language?: string;
            /** Format: uri */
            avatarUrl?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['User'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users.update_role': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Change a users role
     * @description Change the role of a user, only available to admin authorization.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the user.
             */
            id: string;
            role: components['schemas']['UserRole'];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['User'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users.suspend': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Suspend a user
     * @description Suspending a user prevents the user from signing in. Users that are suspended are also not counted against billing totals in the hosted version.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the user.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['User'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users.activate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Activate a user
     * @description Activating a previously suspended user allows them to signin again. Users that are activated will cause billing totals to be re-calculated in the hosted version.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the user.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['User'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users.delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete a user
     * @description Deleting a user removes the object entirely. In almost every circumstance it is preferable to suspend a user, as a deleted user can be recreated by signing in with SSO again.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description Unique identifier for the user.
             */
            id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        404: components['responses']['NotFound'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/views.list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * List all views
     * @description List all users that have viewed a document and the overall view count.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            documentId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['View'][];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
        429: components['responses']['RateLimited'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/views.create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a view
     * @description Creates a new view for a document. This is documented in the interests of thoroughness however it is recommended that views are not created from outside of the Outline UI.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** Format: uuid */
            documentId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['View'];
            };
          };
        };
        401: components['responses']['Unauthenticated'];
        403: components['responses']['Unauthorized'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @enum {string} */
    Permission: 'read' | 'read_write';
    Attachment: {
      /** @example image/png */
      contentType?: string;
      size?: number;
      name?: string;
      /** Format: uri */
      url?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated document, if any.
       */
      documentId?: string;
    };
    Pagination: {
      offset?: number;
      /** @example 25 */
      limit?: number;
      total?: number;
      nextPath?: string;
    };
    Sorting: {
      /** @example updatedAt */
      sort?: string;
      /**
       * @example DESC
       * @enum {string}
       */
      direction?: 'ASC' | 'DESC';
    };
    NavigationNode: {
      /**
       * Format: uuid
       * @description Unique identifier for the document.
       */
      id?: string;
      title?: string;
      url?: string;
      children?: components['schemas']['NavigationNode'][];
    };
    Auth: {
      user?: components['schemas']['User'];
      team?: components['schemas']['Team'];
    };
    Collection: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /**
       * @description The name of the collection.
       * @example Human Resources
       */
      name?: string;
      /**
       * @description A description of the collection, may contain markdown formatting
       * @example
       */
      description?: string;
      /** @description The sort of documents in the collection. Note that not all API responses respect this and it is left as a frontend concern to implement. */
      sort?: {
        field?: string;
        /** @enum {string} */
        direction?: 'asc' | 'desc';
      };
      /**
       * @description The position of the collection in the sidebar
       * @example P
       */
      index?: string;
      /**
       * @description A color representing the collection, this is used to help make collections more identifiable in the UI. It should be in HEX format including the #
       * @example #123123
       */
      color?: string;
      /** @description A string that represents an icon in the outline-icons package */
      icon?: string;
      permission?: components['schemas']['Permission'];
      /**
       * Format: date-time
       * @description The date and time that this object was created
       */
      readonly createdAt?: string;
      /**
       * Format: date-time
       * @description The date and time that this object was last changed
       */
      readonly updatedAt?: string;
      /**
       * Format: date-time
       * @description The date and time that this object was deleted
       */
      readonly deletedAt?: string | null;
    };
    Comment: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /** @description The editor data representing this comment. */
      data?: Record<string, never>;
      /**
       * Format: uuid
       * @description Identifier for the document this is related to.
       */
      documentId?: string;
      /**
       * Format: uuid
       * @description Identifier for the comment this is a child of, if any.
       */
      parentCommentId?: string;
      /**
       * Format: date-time
       * @description The date and time that this object was created
       */
      readonly createdAt?: string;
      createdBy?: components['schemas']['User'];
      /**
       * Format: date-time
       * @description The date and time that this object was last changed
       */
      readonly updatedAt?: string;
      updatedBy?: components['schemas']['User'];
      /** @description The document text that the comment is anchored to, only included if includeAnchorText=true. */
      readonly anchorText?: string;
    };
    Document: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated collection.
       */
      collectionId?: string;
      /**
       * Format: uuid
       * @description Identifier for the document this is a child of, if any.
       */
      parentDocumentId?: string;
      /**
       * @description The title of the document.
       * @example 🎉 Welcome to Acme Inc
       */
      title?: string;
      /** @description Whether this document should be displayed in a full-width view. */
      fullWidth?: boolean;
      /**
       * @description An emoji associated with the document.
       * @example 🎉
       */
      emoji?: string;
      /**
       * @description The text content of the document, contains markdown formatting
       * @example …
       */
      text?: string;
      /**
       * @description A short unique ID that can be used to identify the document as an alternative to the UUID
       * @example hDYep1TPAM
       */
      urlId?: string;
      collaborators?: components['schemas']['User'][];
      /** @description Whether this document is pinned in the collection */
      pinned?: boolean;
      /** @description Whether this document is a template */
      template?: boolean;
      /**
       * Format: uuid
       * @description Unique identifier for the template this document was created from, if any
       */
      templateId?: string;
      /** @description A number that is auto incrementing with every revision of the document that is saved */
      readonly revision?: number;
      /**
       * Format: date-time
       * @description The date and time that this object was created
       */
      readonly createdAt?: string;
      createdBy?: components['schemas']['User'];
      /**
       * Format: date-time
       * @description The date and time that this object was last changed
       */
      readonly updatedAt?: string;
      updatedBy?: components['schemas']['User'];
      /**
       * Format: date-time
       * @description The date and time that this object was published
       */
      readonly publishedAt?: string | null;
      /**
       * Format: date-time
       * @description The date and time that this object was archived
       */
      readonly archivedAt?: string;
      /**
       * Format: date-time
       * @description The date and time that this object was deleted
       */
      readonly deletedAt?: string | null;
    };
    Event: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /** @example documents.create */
      readonly name?: string;
      /**
       * Format: uuid
       * @description Identifier for the object this event is associated with when it is not one of document, collection, or user.
       */
      readonly modelId?: string;
      /**
       * Format: uuid
       * @description The user that performed the action.
       */
      readonly actorId?: string;
      /**
       * @description The ip address the action was performed from. This field is only returned when the `auditLog` boolean is true.
       * @example 60.169.88.100
       */
      readonly actorIpAddress?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated collection, if any
       */
      readonly collectionId?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated document, if any
       */
      readonly documentId?: string;
      /**
       * Format: date-time
       * @description The date and time that this event was created
       */
      readonly createdAt?: string;
      /**
       * @description Additional unstructured data associated with the event
       * @example {
       *       "name": "Equipment list"
       *     }
       */
      readonly data?: Record<string, never>;
      actor?: components['schemas']['User'];
    };
    Error: {
      /** @example false */
      ok?: boolean;
      error?: string;
      message?: string;
      status?: number;
      data?: Record<string, never>;
    };
    FileOperation: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /**
       * @description The type of file operation.
       * @example export
       * @enum {string}
       */
      readonly type?: 'import' | 'export';
      /**
       * @description The state of the file operation.
       * @example complete
       * @enum {string}
       */
      readonly state?: 'creating' | 'uploading' | 'complete' | 'error' | 'expired';
      collection?: unknown & components['schemas']['Collection'];
      user?: components['schemas']['User'];
      /**
       * @description The size of the resulting file in bytes
       * @example 2048
       */
      readonly size?: number;
      /**
       * Format: date-time
       * @description The date and time that this object was created
       */
      readonly createdAt?: string;
    };
    Group: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /**
       * @description The name of this group.
       * @example Engineering
       */
      name?: string;
      /**
       * @description The number of users that are members of the group
       * @example 11
       */
      readonly memberCount?: number;
      /**
       * Format: date-time
       * @description The date and time that this object was created
       */
      readonly createdAt?: string;
      /**
       * Format: date-time
       * @description The date and time that this object was last changed
       */
      readonly updatedAt?: string;
    };
    Share: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /**
       * @description Title of the shared document.
       * @example React best practices
       */
      readonly documentTitle?: string;
      /**
       * Format: uri
       * @description URL of the original document.
       */
      readonly documentUrl?: string;
      /**
       * Format: uri
       * @description URL of the publicly shared document.
       */
      readonly url?: string;
      /**
       * @description If true the share can be loaded without a user account.
       * @example false
       */
      published?: boolean;
      /**
       * @description If to also give permission to view documents nested beneath this one.
       * @example true
       */
      includeChildDocuments?: boolean;
      /**
       * Format: date-time
       * @description Date and time when this share was created
       */
      readonly createdAt?: string;
      createdBy?: components['schemas']['User'];
      /**
       * Format: date-time
       * @description Date and time when this share was edited
       */
      readonly updatedAt?: string;
      /**
       * Format: date-time
       * @description Date and time when this share was last viewed
       */
      readonly lastAccessedAt?: string;
    };
    Revision: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated document.
       */
      readonly documentId?: string;
      /** @description Title of the document. */
      readonly title?: string;
      /** @description Body of the document, may contain markdown formatting */
      readonly text?: string;
      /**
       * Format: date-time
       * @description Date and time when this revision was created
       */
      readonly createdAt?: string;
      createdBy?: components['schemas']['User'];
    };
    Team: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /** @description The name of this team, it is usually auto-generated when the first SSO connection is made but can be changed if neccessary. */
      name?: string;
      /**
       * Format: uri
       * @description The URL for the image associated with this team, it will be displayed in the team switcher and in the top left of the knowledge base along with the name.
       */
      avatarUrl?: string;
      /** @description Whether this team has share links globally enabled. If this value is false then all sharing UI and APIs are disabled. */
      sharing?: boolean;
      /**
       * Format: uuid
       * @description If set then the referenced collection is where users will be redirected to after signing in instead of the Home screen
       */
      defaultCollectionId?: string;
      defaultUserRole?: components['schemas']['UserRole'];
      /** @description Whether members are allowed to create new collections. If false then only admins can create collections. */
      memberCollectionCreate?: boolean;
      /** @description Whether this team has embeds in documents globally enabled. It can be disabled to reduce potential data leakage to third parties. */
      documentEmbeds?: boolean;
      /** @description Whether this team has collaborative editing in documents globally enabled. */
      collaborativeEditing?: boolean;
      /** @description Whether an invite is required to join this team, if false users may join with a linked SSO provider. */
      inviteRequired?: boolean;
      allowedDomains?: string[];
      /** @description Whether this team has guest signin enabled. Guests can signin with an email address and are not required to have a Google Workspace/Slack SSO account once invited. */
      guestSignin?: boolean;
      /** @description Represents the subdomain at which this team's knowledge base can be accessed. */
      subdomain?: string;
      /**
       * Format: uri
       * @description The fully qualified URL at which this team's knowledge base can be accessed.
       */
      readonly url?: string;
    };
    User: {
      /**
       * Format: uuid
       * @description Unique identifier for the object.
       */
      readonly id?: string;
      /**
       * @description The name of this user, it is migrated from Slack or Google Workspace when the SSO connection is made but can be changed if neccessary.
       * @example Jane Doe
       */
      name?: string;
      /**
       * Format: uri
       * @description The URL for the image associated with this user, it will be displayed in the application UI and email notifications.
       */
      avatarUrl?: string;
      /**
       * Format: email
       * @description The email associated with this user, it is migrated from Slack or Google Workspace when the SSO connection is made but can be changed if neccessary.
       */
      readonly email?: string;
      role?: components['schemas']['UserRole'];
      /** @description Whether this user has been suspended. */
      readonly isSuspended?: boolean;
      /**
       * Format: date-time
       * @description The last time this user made an API request, this value is updated at most every 5 minutes.
       */
      readonly lastActiveAt?: string;
      /**
       * Format: date-time
       * @description The date and time that this user first signed in or was invited as a guest.
       */
      readonly createdAt?: string;
    };
    Invite: {
      /** @description The full name of the user being invited */
      name?: string;
      /** @description The email address to invite */
      email?: string;
      role?: components['schemas']['UserRole'];
    };
    /** @enum {string} */
    UserRole: 'admin' | 'member' | 'viewer' | 'guest';
    Membership: {
      /** @description Unique identifier for the object. */
      readonly id?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated user.
       */
      readonly userId?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated collection.
       */
      readonly collectionId?: string;
      permission?: components['schemas']['Permission'];
    };
    SearchResult: {
      /** Format: uuid */
      readonly id?: string;
      /**
       * @description The user-provided search query
       * @example What is our hiring policy?
       */
      readonly query?: string;
      /**
       * @description An answer to the query, if possible
       * @example Our hiring policy can be summarized as…
       */
      readonly answer?: string;
      /**
       * @description The source of the query
       * @example app
       * @enum {string}
       */
      readonly source?: 'api' | 'app';
      /**
       * Format: date-time
       * @description The date and time that this object was created
       */
      readonly createdAt?: string;
    };
    Policy: {
      /**
       * Format: uuid
       * @description Unique identifier for the object this policy references.
       */
      readonly id?: string;
      abilities?: {
        create?: boolean;
        read?: boolean;
        update?: boolean;
        delete?: boolean;
        restore?: boolean;
        star?: boolean;
        unstar?: boolean;
        share?: boolean;
        download?: boolean;
        pin?: boolean;
        unpin?: boolean;
        move?: boolean;
        archive?: boolean;
        unarchive?: boolean;
        createChildDocument?: boolean;
      };
    };
    GroupMembership: {
      /** @description Unique identifier for the object. */
      readonly id?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated group.
       */
      readonly groupId?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated user.
       */
      readonly userId?: string;
      user?: components['schemas']['User'];
    };
    CollectionGroupMembership: {
      /** @description Unique identifier for the object. */
      readonly id?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated group.
       */
      readonly groupId?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated collection.
       */
      readonly collectionId?: string;
      permission?: components['schemas']['Permission'];
    };
    View: {
      /** @description Unique identifier for the object. */
      readonly id?: string;
      /**
       * Format: uuid
       * @description Identifier for the associated document.
       */
      readonly documentId?: string;
      /**
       * Format: date-time
       * @description When the document was first viewed by the user
       */
      readonly firstViewedAt?: string;
      /**
       * Format: date-time
       * @description When the document was last viewed by the user
       */
      readonly lastViewedAt?: string;
      /**
       * @description The number of times the user has viewed the document.
       * @example 22
       */
      readonly count?: number;
      user?: components['schemas']['User'];
    };
  };
  responses: {
    /** @description The specified resource was not found. */
    NotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description The request failed one or more validations. */
    Validation: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description The current API key is not authorized to perform this action. */
    Unauthorized: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description The API key is missing or otherwise invalid. */
    Unauthenticated: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description The request was rate limited. */
    RateLimited: {
      headers: {
        'Retry-After': components['headers']['Retry-After'];
        'RateLimit-Limit': components['headers']['RateLimit-Limit'];
        'RateLimit-Remaining': components['headers']['RateLimit-Remaining'];
        'RateLimit-Reset': components['headers']['RateLimit-Reset'];
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @example false */
          ok?: boolean;
          /** @example rate_limit_exceeded */
          error?: string;
          /** @example 429 */
          status?: number;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: {
    /** @description Seconds in the future to retry the request, if rate limited. */
    'Retry-After': number;
    /** @description The maximum requests available in the current duration. */
    'RateLimit-Limit': number;
    /** @description How many requests are left in the current duration. */
    'RateLimit-Remaining': number;
    /** @description Timestamp in the future the duration will reset. */
    'RateLimit-Reset': string;
  };
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
