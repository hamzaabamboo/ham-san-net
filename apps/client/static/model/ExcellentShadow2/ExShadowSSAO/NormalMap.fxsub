// パラメータ宣言


// 描画を無視するアルファ値の閾値を設定します
// DepthMap.fxsubと合わせてください
float TransparentThreshold = 0.7;

#define fmRange 0.8f


//-----------------------------------------------------
//ここから先はエフェクトに詳しい方はいじらないほうが良いです

// 座法変換行列
float4x4 matWVP        : WORLDVIEWPROJECTION;
float4x4 matWV        : WORLDVIEW;
float4x4 matProj    : PROJECTION;

// マテリアル色
float4   MaterialDiffuse   : DIFFUSE  < string Object = "Geometry"; >;

// MMD本来のsamplerを上書きしないための記述です。削除不可。
#ifndef MIKUMIKUMOVING
sampler MMDSamp0 : register(s0);
sampler MMDSamp1 : register(s1);
sampler MMDSamp2 : register(s2);
#endif

struct VS_OUTPUT
{
    float4 Pos        : POSITION;        // 射影変換座標
    float3 Normal    : COLOR0;        // 法線
    float2 TexCoord    : TEXCOORD0;    // UV
};

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state
{
    texture = <ObjectTexture>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
};

bool use_texture;  //テクスチャの有無
bool use_toon;     //トゥーンの有無

// 頂点シェーダ
#ifndef MIKUMIKUMOVING
VS_OUTPUT Basic_VS(float4 Pos: POSITION, float3 Normal: NORMAL, float2 Tex: TEXCOORD0)
#else
VS_OUTPUT Basic_VS(MMM_SKINNING_INPUT IN)
#endif
{
    VS_OUTPUT Out = (VS_OUTPUT)0;
    
    matProj._11 *= fmRange;
    matProj._22 *= fmRange;
    
    //MikuMikuMoving独自のスキニング関数(MMM_SkinnedPositionNormal)。
    #ifdef MIKUMIKUMOVING
    MMM_SKINNING_OUTPUT SkinOut = MMM_SkinnedPositionNormal(IN.Pos, IN.Normal, IN.BlendWeight, IN.BlendIndices, IN.SdefC, IN.SdefR0, IN.SdefR1);
    
    float4 Pos = SkinOut.Position;
    float3 Normal = SkinOut.Normal;
    float2 Tex = IN.Tex;
    #endif
    
    Out.Pos = mul(Pos, mul(matWV, matProj));
    
    Out.Normal = (normalize(Normal) + 1.0f) / 2.0f;
    Out.TexCoord = Tex;
    
    return Out;
}


// ピクセルシェーダ
float4 Basic_PS(VS_OUTPUT IN, uniform bool useTex) : COLOR
{
    float a = MaterialDiffuse.a;
    
    if(useTex) a *= tex2D(ObjTexSampler,IN.TexCoord).a;
    
    a = (a > TransparentThreshold);
    
    return float4(IN.Normal, a);
}


// オブジェクト描画用テクニック
technique MainTec <
    string MMDPass = "object";
    bool UseTexture = false;
> {
    pass DrawObject
    {
            VertexShader = compile vs_2_0 Basic_VS();
            PixelShader  = compile ps_2_0 Basic_PS(false);
    }
}

technique MainTexTec <
    string MMDPass = "object";
    bool UseTexture = true;
> {
    pass DrawObject
    {
            VertexShader = compile vs_2_0 Basic_VS();
            PixelShader  = compile ps_2_0 Basic_PS(true);
    }
}

// オブジェクト描画用テクニック
technique MainTecBS  <
    string MMDPass = "object_ss";
    bool UseTexture = false;
> {
    pass DrawObject {
            AlphaBlendEnable = FALSE;
            VertexShader = compile vs_2_0 Basic_VS();
            PixelShader  = compile ps_2_0 Basic_PS(false);
    }
}
technique MainTexTecBS  <
    string MMDPass = "object_ss";
    bool UseTexture = true;
> {
    pass DrawObject {
            AlphaBlendEnable = FALSE;
            VertexShader = compile vs_2_0 Basic_VS();
            PixelShader  = compile ps_2_0 Basic_PS(true);
    }
}

technique EdgeTec < string MMDPass = "edge"; > {

}
technique ShadowTech < string MMDPass = "shadow"; > {

}
