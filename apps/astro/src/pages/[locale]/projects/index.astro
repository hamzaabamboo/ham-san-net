---
import groupBy from 'lodash/groupBy';
import { FaGithub, FaGlobe } from 'react-icons/fa';
import { Box, Container, Grid, GridItem, Stack, styled, Wrap } from 'styled-system/jsx';
import { formatMonthYear, parseDate } from 'utils/date';
import { getMediaUrl } from 'utils/media';
import { Heading } from '~/components/ui/heading';
import { IconButton } from '~/components/ui/icon-button';
import { Link } from '~/components/ui/link';
import { Text } from '~/components/ui/text';
import { graphQLSdk } from '~/graphql';
import { Enum_Componentutilslink_Type } from '~/graphql/generated/client';
import { useTranslations, validateLocale } from '~/i18n/utils';
import MainLayout from '~/layouts/MainLayout.astro';

export const prerender = false;

const { locale } = Astro.params;

if (!validateLocale(locale)) {
  return Astro.redirect(404);
}

//TODO:

const data = await graphQLSdk.fetchProjects({
  // locale,
  limit: 75
});

const projects = data?.projects?.data ?? [];

const t = useTranslations(locale);

const projectGroups = groupBy(projects, (project) =>
  project.attributes?.isActive ? t('project.active') : t('project.inactive')
);

Astro.response.headers.set('CDN-Cache-Control', 'public, max-age=86400, must-revalidate');
---

<MainLayout>
  <Container maxW="breakpoint-xl">
    <Stack py="4" gap="4" w="full">
      <Heading as="h1" size="2xl" fontWeight="bold">{t('project.projects')}</Heading>
      {
        [t('project.active'), t('project.inactive')].map((group: keyof typeof projectGroups) => {
          return (
            <Stack>
              <Heading as="h2" fontSize="xl" fontWeight="bold">
                {group}
              </Heading>
              <Grid gridTemplateColumns="repeat(auto-fit, minmax(200px, 1fr))">
                {projectGroups[group].map((p) => {
                  const { title, description, slug, banner, media, date, category, links } =
                    p.attributes ?? {};
                  const image = banner?.data?.attributes ?? media?.data?.[0]?.attributes;
                  const link = links?.find((l) => l?.type === Enum_Componentutilslink_Type.Web);
                  const ghLink = links?.find(
                    (l) => l?.type === Enum_Componentutilslink_Type.Github
                  );

                  return (
                    <GridItem>
                      <Stack h="full">
                        <Link
                          flex={1}
                          href={`/${locale}/projects/${slug}`}
                          data-astro-prefetch="hover"
                        >
                          <Stack h="full" gap="0.5">
                            {image && (
                              <Box borderRadius="l2" overflow="hidden">
                                <styled.img
                                  src={
                                    getMediaUrl(image.url, {}, import.meta.env.PUBLIC_API_URL) ?? ''
                                  }
                                  alt={image.name}
                                  objectFit="contain"
                                  objectPosition="center"
                                  backgroundColor="bg.muted"
                                  width="full"
                                  aspectRatio="4 / 3"
                                  style={{
                                    viewTransitionName: `project-image-${slug}`
                                  }}
                                />
                              </Box>
                            )}
                            <Text
                              fontWeight="bold"
                              style={{
                                viewTransitionName: `project-title-${slug}`
                              }}
                            >
                              {title}
                            </Text>
                            <Wrap fontSize="sm" gap="1" rowGap="0.5" color="fg.subtle">
                              <Text>{category?.data?.attributes?.name}</Text> <Text>|</Text>
                              <Text>{formatMonthYear(parseDate(date), locale)}</Text>
                            </Wrap>
                            <Text fontSize="sm">{description}</Text>
                          </Stack>
                        </Link>
                        <Wrap w="full">
                          {link?.url && (
                            <Link href={link?.url} target="_blank">
                              <IconButton size="xs" variant="subtle">
                                <FaGlobe />
                              </IconButton>
                            </Link>
                          )}
                          {ghLink?.url && (
                            <Link href={ghLink.url} target="_blank">
                              <IconButton size="xs" variant="subtle">
                                <FaGithub />
                              </IconButton>
                            </Link>
                          )}
                        </Wrap>
                      </Stack>
                    </GridItem>
                  );
                })}
              </Grid>
            </Stack>
          );
        })
      }
    </Stack>
  </Container>
</MainLayout>
