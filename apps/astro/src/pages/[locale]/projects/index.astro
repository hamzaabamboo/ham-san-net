---
import groupBy from 'lodash/groupBy';
import { Container, Grid, GridItem, Stack } from 'styled-system/jsx';
import { ProjectCard } from '~/components/projects/ProjectCard';
import { Heading } from '~/components/ui/heading';
import { graphQLSdk } from '~/graphql';
import { useTranslations, validateLocale } from '~/i18n/utils';
import MainLayout from '~/layouts/MainLayout.astro';

export const prerender = false;

const { locale } = Astro.params;

if (!validateLocale(locale)) {
  return Astro.redirect('/404');
}

//TODO:

const data = await graphQLSdk.fetchProjects({
  // locale,
  limit: 75
});

const projects = data?.projects?.data ?? [];

const t = useTranslations(locale);

const projectGroups = groupBy(projects, (project) =>
  project.attributes?.isActive ? t('project.active') : t('project.inactive')
);

Astro.response.headers.set('CDN-Cache-Control', 'public, max-age=86400, must-revalidate');
---

<MainLayout>
  <Container maxW="breakpoint-xl">
    <Stack py="4" gap="4" w="full">
      <Heading as="h1" size="2xl" fontWeight="bold">{t('project.projects')}</Heading>
      {
        [t('project.active'), t('project.inactive')].map((group: keyof typeof projectGroups) => {
          return (
            <Stack>
              <Heading as="h2" fontSize="xl" fontWeight="bold">
                {group}
              </Heading>
              <Grid gridTemplateColumns="repeat(auto-fit, minmax(200px, 1fr))">
                {projectGroups[group].map((p) => {
                  return (
                    <GridItem>
                      {p.attributes && <ProjectCard data={p.attributes} locale={locale} />}
                    </GridItem>
                  );
                })}
              </Grid>
            </Stack>
          );
        })
      }
    </Stack>
  </Container>
</MainLayout>
