---
//TODO:
import { FaArrowLeft } from 'react-icons/fa';
import { Box, Container, Divider, Stack, Wrap, styled } from 'styled-system/jsx';
import { formatMonthYear, parseDate } from 'utils/date';
import { getMediaUrl } from 'utils/media';
import { Carousel } from '~/components/common/Carousel';
import { LinkItem } from '~/components/common/LinkItem';
import { Markdown } from '~/components/lib/Markdown';
import { Heading } from '~/components/ui/heading';
import { Link } from '~/components/ui/link';
import { Text } from '~/components/ui/text';
import { graphQLSdk } from '~/graphql';
import { ComponentUtilsLink } from '~/graphql/generated/client';
import { useTranslations, validateLocale } from '~/i18n/utils';
import MainLayout from '~/layouts/MainLayout.astro';

export const prerender = false;

const { locale, slug } = Astro.params;

const data = await graphQLSdk.getProjectBySlug({
  slug
});

if (!validateLocale(locale)) {
  return Astro.redirect(404);
}

const { content, title, banner, links, media, category, date, finishedDate } =
  data?.projects?.data?.[0]?.attributes ?? {};
const { url: bannerPath, name: bannerName } = banner?.data?.attributes ?? {};
const bannerUrl = getMediaUrl(bannerPath, {}, import.meta.env.PUBLIC_API_URL);
const images =
  (media?.data
    .map((d) => getMediaUrl(d.attributes?.url, {}, import.meta.env.PUBLIC_API_URL))
    .filter((d) => !!d) as string[]) ?? [];
const t = useTranslations(locale);

Astro.response.headers.set('CDN-Cache-Control', 'public, max-age=86400, must-revalidate');
---

<MainLayout>
  <Container maxW="breakpoint-xl" py="8" w="full">
    <Stack gap="4">
      <Link href={`/${locale}/projects`}>
        <Wrap fontSize="sm" alignItems="center">
          <FaArrowLeft />
          <Text>{t('project.back-to-projects')}</Text>
        </Wrap>
      </Link>
      {
        bannerUrl && (
          <Box rounded="l1" overflow="hidden">
            <styled.img
              src={bannerUrl}
              alt={bannerName ?? title ?? undefined}
              objectFit="contain"
              objectPosition="center"
              width="full"
              aspectRatio="16 / 9"
              backgroundColor="bg.muted"
              style={{
                viewTransitionName: `project-image-${slug}`
              }}
            />
          </Box>
        )
      }
      <Heading
        as="h1"
        size="2xl"
        fontWeight="bold"
        style={{
          viewTransitionName: `project-title-${slug}`
        }}>{title}</Heading
      >
      <Wrap fontSize="md" color="fg.subtle">
        <Text>{category?.data?.attributes?.name}</Text>
        <Text>|</Text>
        <Text>
          {formatMonthYear(parseDate(date as string), locale)} -{' '}
          {
            finishedDate
              ? formatMonthYear(parseDate(finishedDate as string), locale)
              : t('common.present')
          }
        </Text>
      </Wrap>
      {
        links && (
          <Stack gap="1">
            {links
              .filter((l): l is ComponentUtilsLink => !!l)
              .map((l) => {
                return <LinkItem data={l} />;
              })}
          </Stack>
        )
      }
      <Divider />
      {content && <Markdown content={content} assetsPrefix={import.meta.env.PUBLIC_API_URL} />}
      {
        images.length > 0 && (
          <Stack gap="4">
            <Heading as="h2" size="xl" fontWeight="bold">
              {t('project.screenshots')}
            </Heading>
            <Carousel client:visible images={images} />
          </Stack>
        )
      }
    </Stack>
  </Container>
</MainLayout>
