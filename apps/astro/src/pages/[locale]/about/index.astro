---
import { formatDistance } from 'date-fns';
import { enUS, ja } from 'date-fns/locale';
import groupBy from 'lodash/groupBy';
import sortBy from 'lodash/sortBy';
import { Container, Divider, Grid, GridItem, Stack, Wrap } from 'styled-system/jsx';
import { formatMonthYear, parseDate } from 'utils/date';
import { toKebabCase } from 'utils/kebab-case';
import { Markdown } from '~/components/lib/Markdown';
import { TagBadge } from '~/components/tags/TagBadge';
import { Heading } from '~/components/ui/heading';
import { Link } from '~/components/ui/link';
import { Text } from '~/components/ui/text';
import { graphQLSdk } from '~/graphql';
import { useTranslations, validateLocale } from '~/i18n/utils';
import MainLayout from '~/layouts/MainLayout.astro';
import { sortTags } from '~/utils/tags';

export const prerender = false;
//TODO:

const { locale } = Astro.params;

if (!validateLocale(locale)) {
  return Astro.redirect(404);
}

const t = useTranslations(locale);

const data = await graphQLSdk.fetchAboutMe({
  // TODO: Localize Japanese Text
  locale: 'en'
});

//TODO: Tags
const { aboutMe, educations, experiences, tags: _tags } = data ?? {};

const skills = groupBy(
  _tags?.data?.filter((tag) => tag.attributes?.type !== 'Non_Dev'),
  (tag) => tag.attributes?.type
);

Astro.response.headers.set('CDN-Cache-Control', 'public, max-age=3600, must-revalidate');
---

<MainLayout>
  <Container>
    <Stack p="4" w="full">
      <Heading as="h1" size="2xl" fontWeight="bold">{t('about-me.title')}</Heading>
      <Text>{aboutMe?.data?.attributes?.introduction}</Text>
      <Divider />
      <Stack>
        <Heading as="h2" size="xl" fontWeight="bold">{t('about-me.skills')}</Heading>
        <Grid gridTemplateColumns={{ base: '1fr', md: 'auto 1fr' }}>
          {
            skills &&
              Object.keys(skills).map((key) => {
                return (
                  <>
                    <GridItem>
                      <Text fontWeight="bold">{t(`common.${toKebabCase(key) as 'frontend'}`)}</Text>
                    </GridItem>
                    <GridItem>
                      <Wrap>
                        {sortBy(skills[key], (d) => d.attributes?.projects?.data?.length)
                          .reverse()
                          .map(
                            (s) =>
                              s.attributes && (
                                <Link href={`/tags/${s.attributes.slug}`}>
                                  <TagBadge tag={s.attributes} showCount />
                                </Link>
                              )
                          )}
                      </Wrap>
                    </GridItem>
                  </>
                );
              })
          }
        </Grid>
      </Stack>
      <Divider />
      <Stack>
        <Heading as="h2" size="xl" fontWeight="bold">{t('common.experiences')}</Heading>
        {
          experiences &&
            experiences.data?.map((d) => {
              if (!d.attributes) return null;
              const { title, content, position, tags } = d.attributes;
              const start = d.attributes.start as string;
              const end = d.attributes.end as string;
              return (
                <Stack>
                  <Heading as="h2" size="xl" fontWeight="bold">
                    {title}
                  </Heading>
                  <Wrap fontSize="sm">
                    <Text>{position}</Text> <Text>|</Text>
                    <Text>
                      {formatMonthYear(parseDate(start), locale)} -{' '}
                      {end ? formatMonthYear(parseDate(end), locale) : t('common.present')} (
                      {formatDistance(parseDate(start), end ? parseDate(end) : new Date(), {
                        locale: locale === 'ja' ? ja : enUS
                      })}
                      )
                    </Text>
                  </Wrap>
                  {tags && (
                    <Wrap fontSize="sm" gap="1">
                      <Text>{t('common.tags')}</Text>
                      {sortTags(tags?.data).map(
                        (s) =>
                          s.attributes && (
                            <Link href={`/tags/${s.attributes.slug}`}>
                              <TagBadge tag={s.attributes} showCount size="sm" />
                            </Link>
                          )
                      )}
                    </Wrap>
                  )}
                  {content && <Markdown content={content} />}
                </Stack>
              );
            })
        }
      </Stack>
      <Divider />
      <Stack>
        <Heading as="h2" size="xl" fontWeight="bold">{t('common.education')}</Heading>
        {
          educations &&
            educations.data?.map((d) => {
              if (!d.attributes) return null;
              const { title, description, content } = d.attributes;
              const start = d.attributes.start as string;
              const end = d.attributes.end as string;
              return (
                <Stack>
                  <Heading as="h2" size="xl" fontWeight="bold">
                    {title}
                  </Heading>
                  <Wrap fontSize="sm">
                    <Text>{description}</Text> <Text>|</Text>
                    <Text>
                      {formatMonthYear(parseDate(start), locale)} -{' '}
                      {end ? formatMonthYear(parseDate(end), locale) : t('common.present')}
                    </Text>
                  </Wrap>
                  {content && <Markdown content={content} />}
                </Stack>
              );
            })
        }
      </Stack>
    </Stack>
  </Container>
</MainLayout>
