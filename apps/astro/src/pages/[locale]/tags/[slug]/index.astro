---
import { formatDistance } from 'date-fns';
import { enUS, ja } from 'date-fns/locale';
import { FaArrowLeft } from 'react-icons/fa';
import { Container, Divider, Grid, GridItem, Stack, Wrap } from 'styled-system/jsx';
import { formatMonthYear, parseDate } from 'utils/date';
import { toKebabCase } from 'utils/kebab-case';
import { Markdown } from '~/components/lib/Markdown';
import { ProjectCard } from '~/components/projects/ProjectCard';
import { TagBadge } from '~/components/tags/TagBadge';
import { Heading } from '~/components/ui/heading';
import { Link } from '~/components/ui/link';
import { Text } from '~/components/ui/text';
import { graphQLSdk } from '~/graphql';
import { useTranslations, validateLocale } from '~/i18n/utils';
import MainLayout from '~/layouts/MainLayout.astro';
import { sortTags } from '~/utils/tags';

export const prerender = false;

const { locale, slug } = Astro.params;

const data = await graphQLSdk.getTagBySlug({
  slug
});

if (!validateLocale(locale)) {
  return Astro.redirect('/404');
}

const { projects, experiences, title, type } = data?.tags?.data[0].attributes ?? {};
const t = useTranslations(locale);

Astro.response.headers.set('CDN-Cache-Control', 'public, max-age=86400, must-revalidate');
---

<MainLayout>
  <Container maxW="breakpoint-xl" py="8" w="full">
    <Stack gap="4">
      <Link href={`/${locale}/about`}>
        <Wrap fontSize="sm" alignItems="center">
          <FaArrowLeft />
          <Text>{t('about-me.return-to')}</Text>
        </Wrap>
      </Link>
      <Stack gap="2">
        <Stack gap="1">
          <Heading
            as="h1"
            size="2xl"
            fontWeight="bold"
            style={{
              viewTransitionName: `project-title-${slug}`
            }}>{title}</Heading
          >
          <Wrap fontSize="md" color="fg.subtle">
            <Text>{t(`common.${toKebabCase(type as string) as 'frontend'}`)}</Text>
          </Wrap>
        </Stack>
      </Stack>

      {
        experiences &&
          experiences.data?.map((d) => {
            if (!d.attributes) return null;
            const { title, content, position, tags } = d.attributes;
            const start = d.attributes.start as string;
            const end = d.attributes.end as string;
            return (
              <Stack>
                <Heading as="h2" size="xl" fontWeight="bold">
                  {title}
                </Heading>
                <Wrap fontSize="sm">
                  <Text>{position}</Text> <Text>|</Text>
                  <Text>
                    {formatMonthYear(parseDate(start), locale)} -{' '}
                    {end ? formatMonthYear(parseDate(end), locale) : t('common.present')} (
                    {formatDistance(parseDate(start), end ? parseDate(end) : new Date(), {
                      locale: locale === 'ja' ? ja : enUS
                    })}
                    )
                  </Text>
                </Wrap>
                {tags && (
                  <Wrap fontSize="sm" gap="1">
                    <Text>{t('common.tags')}</Text>
                    {sortTags(tags?.data).map(
                      (s) =>
                        s.attributes && (
                          <Link href={`/${locale}/tags/${s.attributes.slug}`}>
                            <TagBadge tag={s.attributes} showCount size="sm" />
                          </Link>
                        )
                    )}
                  </Wrap>
                )}
                {content && <Markdown content={content} />}
              </Stack>
            );
          })
      }
      <Divider />
      <Grid gridTemplateColumns="repeat(auto-fill, minmax(200px, 1fr))">
        {
          projects?.data
            ?.filter((p) => p.attributes)
            .map((p) => {
              return (
                <GridItem>
                  {p.attributes && <ProjectCard data={p.attributes} locale={locale} />}
                </GridItem>
              );
            })
        }
      </Grid>
    </Stack>
  </Container>
</MainLayout>
